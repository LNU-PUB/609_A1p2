/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.2.3'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// Define a default value for the output file name
ext {
    checkstyleVersion = "10.12.4"
    jacocoVersion = "0.8.9"
    testOutputFile = "defaultTestOutput.log"
    logPath = "$rootDir/testResults"
}

checkstyle {
    toolVersion = checkstyleVersion
    configFile = rootProject.file("config/checkstyle/google_checks.xml")

    maxWarnings = 3
    maxErrors = 0
}

spotbugsMain {
  ignoreFailures = true
  showStackTraces = true

  reports {
    html {
      enabled = true
      destination = file("$buildDir/reports/spotbugs/spotbugs.html")
    }
    xml {
      enabled = true
      destination = file("$buildDir/reports/spotbugs/spotbugs.xml")
    }
  }
}

spotbugsTest {
  ignoreFailures = false 
  showStackTraces = false
  enabled = false 
}

jacoco {
  toolVersion = jacocoVersion
  reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
  reports {
    xml.required = false
    csv.required = false
    html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
  }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    // Use Mockito for mocking.
    testImplementation 'org.mockito:mockito-core:5.7.0:'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'sinkingships.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // Configure the test task

    // Check if a custom output file name is provided
    if (project.hasProperty('testOutput')) {
        testOutputFile = project.property('testOutput')
    }

    // Configure test logging
    testLogging {
        // Set options for logging test output
        events 'passed', 'skipped', 'failed'

        // Log output to a file based on the provided property
        onOutput { descriptor, event ->
            def outputFile = new File("${rootDir}/testResults/${testOutputFile}")
            outputFile.parentFile.mkdirs() // Create directories if they don't exist
            outputFile.withWriterAppend { writer ->
                writer.write("${event.message}\n")
            }
        }
    }
}

tasks.withType(Checkstyle) {
    

    // Failing the build on violation
    doLast {
        def errors = reports.xml.destination.readLines().findAll { it.contains('<error ') }
        def warnings = reports.xml.destination.readLines().findAll { it.contains('severity="warning"') }

        if (errors.size() > maxErrors || warnings.size() > maxWarnings) {
            throw new GradleException("Checkstyle violation limits exceeded: maxErrors=$maxErrors, maxWarnings=$maxWarnings")
        }
    }
}